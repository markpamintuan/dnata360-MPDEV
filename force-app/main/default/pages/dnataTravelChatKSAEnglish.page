<apex:page doctype="html-5.0"  showChat="false" standardStylesheets="false" showHeader="false">  
 <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1" />
 <!--This style is custom by keith -->
 <style>
    body {
        background-image: url("https://dnata360--c.eu13.visual.force.com/resource/1581141623000/dnataTravelWebsiteScreenshot");
        background-position: 0% 0%;
        background-repeat: no-repeat;
        background-size: 1300px 600px;
    }
</style>

<body>
    <style type='text/css'>
    .embeddedServiceHelpButton .helpButton .uiButton {
        background-color: #005290;
        font-family: "Arial", sans-serif;
    }

    .embeddedServiceHelpButton .helpButton .uiButton:focus {
        outline: 1px solid #005290;
    }
    </style>
    <!-- Start of Invitations -->
    <div class="embeddedServiceInvitation" id="snapins_invite" aria-live="assertive" role="dialog" aria-atomic="true">
        <div class="embeddedServiceInvitationHeader" aria-labelledby="snapins_titletext" aria-describedby="snapins_bodytext">
            <img id="embeddedServiceAvatar" />
            <span class="embeddedServiceTitleText" id="snapins_titletext">Need help?</span>
            <button type="button" id="closeInvite" class="embeddedServiceCloseIcon" aria-label="Exit invitation">&times;</button>
        </div>
        <div class="embeddedServiceInvitationBody">
            <p id="snapins_bodytext">How can we help you?</p>
        </div>
        <div class="embeddedServiceInvitationFooter" aria-describedby="snapins_bodytext">
            <button type="button" class="embeddedServiceActionButton" id="rejectInvite">Close</button>
            <button type="button" class="embeddedServiceActionButton" id="acceptInvite">Start Chat</button>
        </div>
    </div>
    <style type='text/css'>
    #snapins_invite {
        background-color: #FFFFFF;
        font-family: "Arial", sans-serif;
        overflow: visible;
        border-radius: 8px;
        visibility: hidden;
    }

    .embeddedServiceInvitation {
        background-color: transparent;
        max-width: 290px;
        max-height: 210px;
        -webkit-box-shadow: 0 7px 12px rgba(0, 0, 0, 0.28);
        -moz-box-shadow: 0 7px 12px rgba(0, 0, 0, 0.28);
        box-shadow: 0 7px 12px rgba(0, 0, 0, 0.28);
    }

    @media only screen and (min-width: 48em) {

        /*mobile*/
        .embeddedServiceInvitation {
            max-width: 332px;
            max-height: 210px;
        }
    }

    .embeddedServiceInvitation>.embeddedServiceInvitationHeader {
        width: inherit;
        height: 32px;
        line-height: 32px;
        padding: 10px;
        color: #FFFFFF;
        background-color: #0090CB;
        overflow: initial;
        display: flex;
        justify-content: space-between;
        align-items: stretch;
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
    }

    .embeddedServiceInvitationHeader #embeddedServiceAvatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
    }

    .embeddedServiceInvitationHeader .embeddedServiceTitleText {
        font-size: 18px;
        color: #FFFFFF;
        overflow: hidden;
        word-wrap: normal;
        white-space: nowrap;
        text-overflow: ellipsis;
        align-self: stretch;
        flex-grow: 1;
        max-width: 100%;
        margin: 0 12px;
    }

    .embeddedServiceInvitationHeader .embeddedServiceCloseIcon {
        border: none;
        border-radius: 3px;
        cursor: pointer;
        position: relative;
        bottom: 3%;
        background-color: transparent;
        width: 32px;
        height: 32px;
        font-size: 23px;
        color: #FFFFFF;
    }

    .embeddedServiceInvitationHeader .embeddedServiceCloseIcon:focus {
        outline: none;
    }

    .embeddedServiceInvitationHeader .embeddedServiceCloseIcon:focus::before {
        content: " ";
        position: absolute;
        top: 11%;
        left: 7%;
        width: 85%;
        height: 85%;
        background-color: rgba(255, 255, 255, 0.2);
        border-radius: 4px;
        pointer-events: none;
    }

    .embeddedServiceInvitationHeader .embeddedServiceCloseIcon:active,
    .embeddedServiceCloseIcon:hover {
        background-color: #FFFFFF;
        color: rgba(0, 0, 0, 0.7);
        opacity: 0.7;
    }

    .embeddedServiceInvitation>.embeddedServiceInvitationBody {
        background-color: #FFFFFF;
        max-height: 110px;
        min-width: 260px;
        margin: 0 8px;
        font-size: 14px;
        line-height: 20px;
        overflow: auto;
    }

    .embeddedServiceInvitationBody p {
        color: #0090CB;
        padding: 8px;
        margin: 12px 0;
    }

    .embeddedServiceInvitation>.embeddedServiceInvitationFooter {
        width: inherit;
        color: #FFFFFF;
        text-align: right;
        background-color: #FFFFFF;
        padding: 10px;
        max-height: 50px;
        border-bottom-left-radius: 8px;
        border-bottom-right-radius: 8px;
    }

    .embeddedServiceInvitationFooter>.embeddedServiceActionButton {
        font-size: 14px;
        max-height: 40px;
        border: none;
        border-radius: 4px;
        padding: 10px;
        margin: 4px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        cursor: pointer;
    }

    .embeddedServiceInvitationFooter>#acceptInvite {
        background-color: #005290;
        color: #FFFFFF;
    }

    .embeddedServiceInvitationFooter>#rejectInvite {
        background-color: #FFFFFF;
        color: #005290;
    }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.js"></script>
    <script type='text/javascript'>
    (function() {
        document.getElementById('closeInvite').onclick = function() { embedded_svc.inviteAPI.inviteButton.rejectInvite(); };
        document.getElementById('rejectInvite').onclick = function() { embedded_svc.inviteAPI.inviteButton.rejectInvite(); }; // use this API call to reject invitations
        document.getElementById('acceptInvite').onclick = function() { embedded_svc.inviteAPI.inviteButton.acceptInvite(); }; // use this API call to start chat from invitations
        document.addEventListener('keyup', function(event) { if (event.keyCode == 27) { embedded_svc.inviteAPI.inviteButton.rejectInvite(); } })
    })();
    </script>
    <!-- End of Invitations -->
    <script type='text/javascript' src='https://service.force.com/embeddedservice/5.0/esw.min.js'></script>
    <script type='text/javascript'>
    var chkey;

    function makeid() {
        var text = "";
        var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

        for (var i = 0; i < 15; i++)
            text += possible.charAt(Math.floor(Math.random() * possible.length));

        return text;
    }

    var initESW = function(gslbBaseURL) {
        chkey = Date.now() + makeid();
        embedded_svc.settings.displayHelpButton = true; //Or false
        embedded_svc.settings.language = 'en'; //For example, enter 'en' or 'en-US'

        embedded_svc.settings.defaultMinimizedText = 'Chat with us'; //(Defaults to Chat with an Expert)
        //embedded_svc.settings.disabledMinimizedText = '...'; //(Defaults to Agent Offline)

        //embedded_svc.settings.loadingText = ''; //(Defaults to Loading)
        //embedded_svc.settings.storageDomain = 'yourdomain.com'; //(Sets the domain for your deployment so that visitors can navigate subdomains during a chat session)

        // Settings for Chat
        //embedded_svc.settings.directToButtonRouting = function(prechatFormData) {
        // Dynamically changes the button ID based on what the visitor enters in the pre-chat form.
        // Returns a valid button ID.
        //};
        //embedded_svc.settings.prepopulatedPrechatFields = {}; //Sets the auto-population of pre-chat form fields
        //embedded_svc.settings.fallbackRouting = []; //An array of button IDs, user IDs, or userId_buttonId
        //embedded_svc.settings.offlineSupportMinimizedText = '...'; //(Defaults to Contact Us)

        embedded_svc.settings.enabledFeatures = ['LiveAgent'];
        embedded_svc.settings.entryFeature = 'LiveAgent';

        /*************************** Custom JS **********************************/

        embedded_svc.settings.extraPrechatFormDetails = [{
                'value': window.location.href,
                'transcriptFields': ['Current_URL__c']
            },
            {
                'label': 'Chat Key',
                'value': chkey,
                'transcriptFields': ['Key__c'],
                'displayToAgent': true
            },
            {
                "label": "personAccRecordTypeId",
                "value": "0120Y000000ytxxQAA",
                "transcriptFields": ['Person_Account_Id__c'],
                "displayToAgent": true
            },
            {
                'label': 'Last Name',
                'transcriptFields': ['Contact_Last_Name__c'],
                'displayToAgent': true
            },
            {
                'label': 'First Name',
                'transcriptFields': ['Contact_First_Name__c'],
                'displayToAgent': true
            },
            {
                'label': 'Mobile',
                'transcriptFields': ['Contact_Phone_Number__c']
            },
            {
                'label': 'Brand',
                'value': 'dnata',
                'transcriptFields': ['Contact_Brand__c']
            },
            {
                'label': 'Email',
                'transcriptFields': ['Contact_Email__c']
            },
            {
                'value': 'en',
                'transcriptFields': ['Live_Chat_Language__c']
            },

            {
                "label": "customerDomain",
                "value": "Saudi Arabia",
                "displayToAgent": false
            },
            {
                "label": "origin",
                "value": "Live Chat",
                "displayToAgent": false
            }
        ];
        embedded_svc.settings.extraPrechatInfo = [{
                "entityFieldMaps": [
                    { "doCreate": false, "doFind": false, "fieldName": "LastName", "isExactMatch": true, "label": "Last Name" },
                    { "doCreate": false, "doFind": false, "fieldName": "FirstName", "isExactMatch": true, "label": "First Name" },
                    { "doCreate": false, "doFind": false, "fieldName": "Email", "isExactMatch": true, "label": "Email" }
                ],
                "entityName": "Contact",
                "saveToTranscript": "Contact",
                "showOnCreate": false
            },

            {
                "entityFieldMaps": [{
                        "isExactMatch": false,
                        "doCreate": true,
                        "doFind": false,
                        "fieldName": "SuppliedPhone",
                        "label": "Mobile"
                    },
                    {
                        "isExactMatch": false,
                        "doCreate": true,
                        "doFind": false,
                        "fieldName": "SuppliedEmail",
                        "label": "Email"
                    },

                    {
                        "isExactMatch": false,
                        "doCreate": true,
                        "doFind": false,
                        "fieldName": "First_Name__c",
                        "label": "First Name"
                    },

                    {
                        "isExactMatch": false,
                        "doCreate": true,
                        "doFind": false,
                        "fieldName": "Last_Name__c",
                        "label": "Last Name"
                    },
                    {
                        "isExactMatch": false,
                        "doCreate": true,
                        "doFind": false,
                        "fieldName": "Case_Domain__c",
                        "label": "customerDomain"
                    },
                    {
                        "isExactMatch": false,
                        "doCreate": true,
                        "doFind": false,
                        "fieldName": "Origin",
                        "label": "origin"
                    }
                ],
                "entityName": "Case",
                "saveToTranscript": "CaseId",
                "showOnCreate": true
            }


        ];

        /*************************** End of Custom JS **********************************/
        embedded_svc.init(
            'https://dnata360.my.salesforce.com',
            'https://dnata360marketingcontroller.secure.force.com/dnataTravelLiveChat',
            gslbBaseURL,
            '00D0Y0000035L25',
            'dnata_Travel_KSA_English',
            {
                baseLiveAgentContentURL: 'https://c.la1-c2-frf.salesforceliveagent.com/content',
                deploymentId: '5722X000000XZJk',
                buttonId: '5732X000000XZSI',
                baseLiveAgentURL: 'https://d.la1-c2-frf.salesforceliveagent.com/chat',
                eswLiveAgentDevName: 'EmbeddedServiceLiveAgent_Parent04I2X000000GmbMUAS_1702929cf9b',
                isOfflineSupportEnabled: false
            }
        );
    };

    if (!window.embedded_svc) {
        var s = document.createElement('script');
        s.setAttribute('src', 'https://dnata360.my.salesforce.com/embeddedservice/5.0/esw.min.js');
        s.onload = function() {
            initESW(null);
        };
        document.body.appendChild(s);
    } else {
        initESW('https://service.force.com');
    }
    </script>
</body>
</apex:page>